import "inspectable.idl";
import "EventToken.idl";
import "AsyncInfo.idl";
import "Windows.Foundation.idl"; 
import "Windows.Foundation.Numerics.idl";
import "Windows.Media.idl";
import "Windows.UI.Xaml.Controls.idl";
import "Windows.Media.Audio.idl";
import "Windows.UI.Xaml.idl";

#include <sdkddkver.h>

#define VERSION NTDDI_WIN10_RS2;
#define STANDARD_ATTRIBUTES version(VERSION), marshaling_behavior(agile), threading(both)

namespace Microsoft.Graphics.Canvas
{
	 runtimeclass CanvasDrawingSession;
}

namespace AudioVisualizer
{
	interface IVisualizationSource;
	interface IVisualizationDataFrame;
	interface IVisualizer;

	runtimeclass VisualizerDrawEventArgs;
	runtimeclass VisualizationDataFrame;
	runtimeclass SpectrumData;
	runtimeclass ScalarData;
	runtimeclass CreateResourcesEventArgs;
}

namespace AudioVisualizer
{
	[version(1.0)]
	typedef enum ScaleType
	{
		Linear = (int)0,
		Logarithmic = (int)1
	} ScaleType;

	[version(1.0)]
	typedef enum InterpolationType
	{
		Linear = (int)0,
		CubicSpline = (int)1
	} InterpolationType;

	[version(1.0)]
	typedef enum CreateResourcesReason
	{
		New = (int)0,
		DeviceLost = (int)1,
		DpiChanged = (int)2
	} CreateResourcesReason;

	[version(1.0),flags]
	typedef enum AnalyzerType
	{
		RMS = (int)1,
		Peak = (int)2,
		Spectrum = (int)4,
		All = (int)7
	} AnalyzerType;

	[version(1.0)]
	typedef enum SourcePlaybackState
	{
		Stopped = (int) 0,
		Playing = (int) 1,
		Paused = (int) 2
	} SourcePlaybackState;

	declare{
		interface Windows.Foundation.IAsyncOperation<IVisualizationSource *>;
		interface Windows.Foundation.TypedEventHandler<IInspectable*, CreateResourcesEventArgs*>;
		interface Windows.Foundation.Collections.IVectorView<Windows.Foundation.Collections.IVectorView<float> *>;
		interface Windows.Foundation.TypedEventHandler<Windows.UI.Xaml.DependencyObject*, Windows.UI.Xaml.DependencyProperty *>;
		interface Windows.Foundation.TypedEventHandler<IVisualizationSource *, HSTRING>;
		interface Windows.Foundation.IReference<AnalyzerType>;
	}

	[uuid(62C7FB4D-4712-4A49-BF0F-597AC7079F3A)]
	[version(1.0)]
	[exclusiveto(VisualizerDrawEventArgs)]
	interface IVisualizerDrawEventArgs : IInspectable
	{
		[propget] HRESULT Data([out][retval] VisualizationDataFrame **pData);
		[propget] HRESULT DrawingSession([out][retval] IInspectable **pSession);
		[propget] HRESULT ViewExtent([out][retval] Windows.Foundation.Size *viewSize);
		[propget] HRESULT PresentationTime([out][retval] Windows.Foundation.IReference<Windows.Foundation.TimeSpan> **pTime);
	}

	[version(1.0), uuid(7F644CA7-6BD9-455D-A330-BD5F4E9A6DA5), exclusiveto(VisualizerDrawEventArgs)]
	interface IVisualizerDrawEventArgsFactory : IInspectable
	{
		HRESULT Create(
			[in] IInspectable* canvasDrawingSession,
			[in] IVisualizationDataFrame *data,
			[in] Windows.Foundation.Size viewExtent,
			[in] Windows.Foundation.IReference<Windows.Foundation.TimeSpan> *pTime,
			[out, retval] VisualizerDrawEventArgs** drawEventArgs
		);
	};

	[version(1.0),activatable(IVisualizerDrawEventArgsFactory,1.0), marshaling_behavior(agile), threading(both)]
	runtimeclass VisualizerDrawEventArgs
	{
		[default] interface IVisualizerDrawEventArgs;
	}

	[uuid(12E64D18-2267-4416-B925-549FEC6775C5)]
	[version(1.0)]
	[exclusiveto(CreateResourcesEventArgs)]
	interface ICreateResourcesEventArgs : IInspectable
	{
		[propget] HRESULT Reason([out][retval] CreateResourcesReason *reason);
		[propget] HRESULT ResourceCreator([out][retval] IInspectable **ppObject);
	}

	[uuid(3B2C2810-F608-49D5-9F17-951F8BDDFFB0)]
	[version(1.0)]
	[exclusiveto(CreateResourcesEventArgs)]
	interface ICreateResourcesEventArgsFactory : IInspectable
	{
		HRESULT Create([in] CreateResourcesReason reason, 
			[in] IInspectable *pCreatorObject, 
			[retval, out] CreateResourcesEventArgs **createEventArgs);
	};

	[version(1.0),activatable(ICreateResourcesEventArgsFactory,1.0), marshaling_behavior(agile), threading(both)]
	runtimeclass CreateResourcesEventArgs
	{
		[default] interface ICreateResourcesEventArgs;
	}

	[uuid(D3C979CE-1D6D-4507-B7CE-5A2E97F672FC)]
	[version(1.0)]
	interface IVisualizer : IInspectable
	{
		[propget] HRESULT Source([out][retval] IVisualizationSource **pData);
		[propput] HRESULT Source([in] IVisualizationSource *pData);

		[propget] HRESULT BackgroundColor([out, retval] Windows.UI.Color *color);
		[propput] HRESULT BackgroundColor([in] Windows.UI.Color color);
	}

	[uuid(11A7C461-9AFB-4AFB-B2E1-6E587D581139)]
	[version(1.0)]
	interface IVisualizerCustomDraw : IInspectable
	{
		[eventadd] HRESULT Draw(
			[in] Windows.Foundation.TypedEventHandler<IVisualizer*, VisualizerDrawEventArgs*>* value,
			[out, retval] EventRegistrationToken* token);
		[eventremove] HRESULT Draw([in] EventRegistrationToken token);
		[eventadd] HRESULT CreateResources(
			[in] Windows.Foundation.TypedEventHandler<IInspectable*, CreateResourcesEventArgs*>* value,
			[out, retval] EventRegistrationToken* token);
		[eventremove] HRESULT CreateResources([in] EventRegistrationToken token);

	};

	[version(1.0), activatable(1.0), marshaling_behavior(agile), threading(both)]
	runtimeclass CustomVisualizer : Windows.UI.Xaml.Controls.Control
	{
		[default] interface IVisualizer;
		interface IVisualizerCustomDraw;
	}

	[version(1.0)]
	typedef struct MeterBarLevel
	{
		float Level;
		Windows.UI.Color Color;
	} MeterBarLevel;

	[version(1.0)]
	typedef enum SpectrumVisualizationStyle
	{
		Bars = (int)0,
		TopBar = (int)1,
		Blocks = (int)2,
		TopBlock = (int)3,
		Line = (int)4
	} SpectrumVisualizationStyle;


	[uuid(DFC03A65-C30B-4B6F-8367-98B7047954AB)]
	[version(1.0)]
	interface IBarVisualizer : IInspectable
	{
		[propget] HRESULT Levels([out] UINT32* elementCount, [out][retval][size_is(, *elementCount)] MeterBarLevel** levels);
		[propput] HRESULT Levels([in] UINT32 elementCount, [in][size_is(elementCount)] MeterBarLevel* levels);
		[propget] HRESULT Orientation([out, retval] Windows.UI.Xaml.Controls.Orientation *orientation);
		[propput] HRESULT Orientation([in] Windows.UI.Xaml.Controls.Orientation orientation);
		[propget] HRESULT ChannelIndex([out, retval] UINT32 *pIndex);
		[propput] HRESULT ChannelIndex([in] UINT32 index);
		[propget] HRESULT RelativeElementMargin([out, retval] Windows.UI.Xaml.Thickness *pValue);
		[propput] HRESULT RelativeElementMargin([in] Windows.UI.Xaml.Thickness value);
		[propget] HRESULT UnlitElement([out, retval] Windows.UI.Color *pColor);
		[propput] HRESULT UnlitElement([in] Windows.UI.Color color);
 	}

	[uuid(F7DAA918-AA98-4AB4-A669-A2DF10217363)]
	[version(1.0)]
	interface IDiscreteVUBar : IInspectable
	{
		[propget] HRESULT DisplayPeak([out, retval] boolean *pbShow);
		[propput] HRESULT DisplayPeak([in] boolean bShow);
	};

	[uuid(7E767576-44A6-4E0C-9656-F081F0035EFF)]
	[version(1.0)]
	interface ISpectrumVisualizer : IInspectable
	{
		[propget] HRESULT VisualizationStyle([out, retval] SpectrumVisualizationStyle *pStyle);
		[propput] HRESULT VisualizationStyle([in] SpectrumVisualizationStyle style);
	};

	[version(1.0), marshaling_behavior(agile), threading(both),activatable(1.0)]
	runtimeclass DiscreteVUBar : Windows.UI.Xaml.Controls.Control
	{
		[default] interface IVisualizer;
		interface IBarVisualizer;
		interface IDiscreteVUBar;
	}

	[version(1.0), marshaling_behavior(agile), threading(both), activatable(1.0)]
	runtimeclass SpectrumVisualizer : Windows.UI.Xaml.Controls.Control
	{
		[default] interface IVisualizer;
		interface IBarVisualizer;
		interface ISpectrumVisualizer;
	}
	
	[uuid(6407028A-43B7-4DB5-A4BE-108DC810904D),version(1.0)]
	[exclusiveto(SpectrumData)]
	interface ISpectrumDataStatics : IInspectable
	{
		HRESULT CreateEmpty(
			[in] UINT32 cChannels,
			[in] UINT32 cElements,
			[in] ScaleType amplitudeScale,
			[in] ScaleType frequencyScale,
			[in] float minFrequency,
			[in] float maxFrequency,
			[out, retval] SpectrumData **ppResult);

		HRESULT Create(
			[in] Windows.Foundation.Collections.IVectorView<Windows.Foundation.Collections.IVectorView<float> *> *pValues,
			[in] ScaleType amplitudeScale,
			[in] ScaleType frequencyScale,
			[in] float minFrequency,
			[in] float maxFrequency,
			[out, retval] SpectrumData **ppResult);
		HRESULT ApplyRiseAndFallToEmpty([in] SpectrumData *previous, [in] Windows.Foundation.TimeSpan riseTime, [in] Windows.Foundation.TimeSpan fallTime, [in] Windows.Foundation.TimeSpan timeFromPrevious, [out, retval] SpectrumData **result);
	};

	[uuid(199F41A4-8EF0-4E0B-AAD3-9E0666511F6A),version(1.0)]
	interface ISpectrumData : IInspectable
	{
		[propget] HRESULT AmplitudeScale([out, retval] AudioVisualizer.ScaleType *scale);
		[propget] HRESULT FrequencyScale([out, retval] AudioVisualizer.ScaleType *scale);
		[propget] HRESULT MinFrequency([out, retval] float *value);
		[propget] HRESULT MaxFrequency([out, retval] float *value);
		[propget] HRESULT FrequencyStep([out, retval] float *value);
		[propget] HRESULT FrequencyCount([out, retval] UINT32 *value);

		HRESULT LinearTransform([in] UINT32 elementCount, [in] float fromFrequency, [in] float toFrequency, [out, retval] SpectrumData **result);
		HRESULT LogarithmicTransform([in] UINT32 elementCount, [in] float fromFrequency, [in] float toFrequency,[out, retval] SpectrumData **result);
		HRESULT ApplyRiseAndFall([in] SpectrumData *previous, [in] Windows.Foundation.TimeSpan riseTime, [in] Windows.Foundation.TimeSpan fallTime, [in] Windows.Foundation.TimeSpan timeFromPrevious, [out, retval] SpectrumData **result);
		HRESULT ConvertToDecibels([in] float minValue,[in] float maxValue, [out, retval] SpectrumData **result );
		HRESULT CombineChannels([in] UINT32 elementCount, [in, size_is(elementCount)] float *pMap,[in] UINT32 cChannels,[out, retval] SpectrumData **result);
		HRESULT GetFrequency([in] UINT32 elementIndex, [out, retval] float *pFrequency);
		HRESULT GetCenterFrequency([in] UINT32 elementIndex, [out, retval] float *pFrequency);
	};

	[version(1.0), marshaling_behavior(agile), threading(both)]
	[static(ISpectrumDataStatics, 1.0)]
	runtimeclass SpectrumData
	{
		[default]interface ISpectrumData;
		interface Windows.Foundation.Collections.IVectorView<Windows.Foundation.Collections.IVectorView<float>*>;
	}

	[version(1.0), uuid(3CD2FCBD-B59B-4766-8077-BC5097C8AC7E), exclusiveto(ScalarData)]
	interface IScalarDataStatics : IInspectable
	{
		HRESULT CreateEmpty([in] UINT32 channels, [out, retval] ScalarData **ppResult);
		HRESULT Create([in] UINT32 channels, [in, size_is(channels)] float *pValues, [out, retval] ScalarData **data);
		HRESULT ApplyRiseAndFallToEmpty([in] ScalarData *previous, [in] Windows.Foundation.TimeSpan riseTime, [in] Windows.Foundation.TimeSpan fallTime, [in] Windows.Foundation.TimeSpan timeFromPrevious, [out, retval] ScalarData **result);
	};

	[uuid(FA6EDA25-96DC-473E-AA4C-5F67C2307134),version(1.0)]
	interface IScalarData : IInspectable
	{
		HRESULT ConvertToDecibels([in] float minValue, [in] float maxValue, [out, retval] ScalarData **result);
		HRESULT ApplyRiseAndFall([in] ScalarData *previous, [in] Windows.Foundation.TimeSpan riseTime, [in] Windows.Foundation.TimeSpan fallTime, [in] Windows.Foundation.TimeSpan timeFromPrevious, [out, retval] ScalarData **result);
		HRESULT CombineChannels([in] UINT32 elementCount, [in, size_is(elementCount)] float *pMap, [in] UINT32 cChannels, [out, retval] ScalarData **result);
		[propget] HRESULT AmplitudeScale([out, retval] AudioVisualizer.ScaleType *scale);
	};

	[version(1.0), marshaling_behavior(agile), threading(both)]
	[static(IScalarDataStatics,1.0)]
	runtimeclass ScalarData
	{
		[default] interface IScalarData;
		interface Windows.Foundation.Collections.IVectorView<float>;
		interface Windows.Foundation.Collections.IIterable<float>;
	}

	[uuid(79A21169-19CE-4E2A-B86E-0000D6A89663)]
	[version(1.0)]
	[exclusiveto(VisualizationDataFrame)]
	interface IVisualizationDataFrameFactory : IInspectable
	{
		HRESULT Create(
			[in] Windows.Foundation.TimeSpan time,
			[in] Windows.Foundation.TimeSpan duration,
			[in] ScalarData *rms,
			[in] ScalarData *peak,
			[in] SpectrumData *spectrum,
			[out, retval] VisualizationDataFrame **ppResult);
	};

	[uuid(E4C11BE5-112E-49AD-A565-EE713089C447)]
	[version(1.0)]
	interface IVisualizationDataFrame : IInspectable {
		[propget] HRESULT Time([out, retval] Windows.Foundation.TimeSpan *time);
		[propget] HRESULT Duration([out, retval] Windows.Foundation.TimeSpan *time);
		[propget] HRESULT RMS([out, retval] ScalarData **data);
		[propget] HRESULT Peak([out, retval] ScalarData **data);
		[propget] HRESULT Spectrum([out, retval] SpectrumData **data);
		HRESULT CombineChannels([in] UINT32 elementCount, [in, size_is(elementCount)] float *map, [in] UINT32 cChannels, [out, retval] IVisualizationDataFrame **result);
	};

	 
	[version(1.0), marshaling_behavior(agile), threading(both)]
	[activatable(IVisualizationDataFrameFactory, 1.0)]
	runtimeclass VisualizationDataFrame
	{
		[default] interface IVisualizationDataFrame; 
	}

	[uuid(B74989FE-1436-4179-92B6-E06B540E0C7E)]
	[version(1.0)]
	interface IVisualizationSource : IInspectable {
		HRESULT GetData([out][retval] IVisualizationDataFrame **result);
		[propget] HRESULT IsSuspended([out][retval] boolean *bIsSuspended);
		[propput] HRESULT IsSuspended(boolean bIsSuspended);
		[propget] HRESULT Fps([out, retval] float *pFramesPerSecond);
		[propput] HRESULT Fps([in] float framesPerSecond);
		[propget] HRESULT AnalyzerTypes([out,retval] AnalyzerType *pResult);
		[propput] HRESULT AnalyzerTypes([in] AnalyzerType types);
		[propget] HRESULT PresentationTime([out, retval] Windows.Foundation.IReference<Windows.Foundation.TimeSpan> **pTime);
		[propget] HRESULT PlaybackState([out, retval] SourcePlaybackState *state);

		[propget] HRESULT ActualFrequencyCount([out, retval] Windows.Foundation.IReference<UINT32> **pcElements);
		[propget] HRESULT ActualChannelCount([out, retval] Windows.Foundation.IReference<UINT32> **pcElements);
		[propget] HRESULT ActualMinFrequency([out, retval] Windows.Foundation.IReference<float> **ppValue);
		[propget] HRESULT ActualMaxFrequency([out, retval] Windows.Foundation.IReference<float> **ppValue);
		[propget] HRESULT ActualFrequencyScale([out, retval] Windows.Foundation.IReference<ScaleType> **ppValue);

		[eventadd] HRESULT ConfigurationChanged(
			[in] Windows.Foundation.TypedEventHandler<IVisualizationSource *, HSTRING>* value,
			[out, retval] EventRegistrationToken* token);
		[eventremove] HRESULT ConfigurationChanged([in] EventRegistrationToken token);

	};

	[uuid(722B9116-78B8-40BD-9840-84B59CAC6E84)]
	[version(1.0)]
	interface ISpectralAnalyzerSettings : IInspectable
	{
		HRESULT ConfigureSpectrum([in] UINT32 fftLength, [in] float overlap);
	};

	runtimeclass PlaybackSource;

	[uuid(086BA13A-7883-4747-A944-4782DFE1ED23)]
	[version(1.0),exclusiveto(PlaybackSource)]
	interface IPlaybackSourceFactory : IInspectable
	{
		HRESULT Create([in] Windows.Media.Playback.MediaPlayer *mediaPlayer,[out,retval] PlaybackSource **result);
	}

	[uuid(84181045-1CC8-44A0-98E7-1EF8DE86F14F)]
	[version(1.0)]
	interface IPlaybackSource : IInspectable
	{
		[propget] HRESULT Source([out, retval] IVisualizationSource **result);
		[eventadd] HRESULT SourceChanged(
			[in] Windows.Foundation.TypedEventHandler<IInspectable*, IVisualizationSource *>* value,
			[out, retval] EventRegistrationToken* token);
		[eventremove] HRESULT SourceChanged([in] EventRegistrationToken token);
	};

	[version(1.0), marshaling_behavior(agile), threading(both)]
	[activatable(IPlaybackSourceFactory, 1.0)]
	runtimeclass PlaybackSource
	{
		[default] interface IPlaybackSource;
	}

	[uuid(D6059D9E-A251-4B90-9D7D-11FF9300FDEB)]
	[version(1.0)]
	interface ISourceConverter : IInspectable
	{
		[propget] HRESULT Source([out, retval] IVisualizationSource **ppSource);
		[propput] HRESULT Source([in] IVisualizationSource *pSource);
		[propget] HRESULT FrequencyCount([out, retval] Windows.Foundation.IReference<UINT32> **pcElements);
		[propput] HRESULT FrequencyCount([in] Windows.Foundation.IReference<UINT32> *pcElements);
		[propget] HRESULT ChannelCount([out, retval] Windows.Foundation.IReference<UINT32> **pcElements);
		[propput] HRESULT ChannelCount([in] Windows.Foundation.IReference<UINT32> *pcElements);
		[propget] HRESULT ChannelMapping([out] UINT32* elementCount, [out][retval][size_is(, *elementCount)] float** values);
		[propput] HRESULT ChannelMapping([in] UINT32 elementCount, [in][size_is(elementCount)] float* values);
		[propget] HRESULT MinFrequency([out, retval] Windows.Foundation.IReference<float> **ppValue);
		[propput] HRESULT MinFrequency([in] Windows.Foundation.IReference<float> *pValue);
		[propget] HRESULT MaxFrequency([out, retval] Windows.Foundation.IReference<float> **ppValue);
		[propput] HRESULT MaxFrequency([in] Windows.Foundation.IReference<float> *pValue);
		[propget] HRESULT FrequencyScale([out, retval] Windows.Foundation.IReference<ScaleType> **ppValue);
		[propput] HRESULT FrequencyScale([in] Windows.Foundation.IReference<ScaleType> *pValue);
		[propget] HRESULT RmsRiseTime([out, retval] Windows.Foundation.IReference<Windows.Foundation.TimeSpan> **ppTime);
		[propput] HRESULT RmsRiseTime([in] Windows.Foundation.IReference<Windows.Foundation.TimeSpan> *pTime);
		[propget] HRESULT RmsFallTime([out, retval] Windows.Foundation.IReference<Windows.Foundation.TimeSpan> **ppTime);
		[propput] HRESULT RmsFallTime([in] Windows.Foundation.IReference<Windows.Foundation.TimeSpan> *pTime);
		[propget] HRESULT PeakRiseTime([out, retval] Windows.Foundation.IReference<Windows.Foundation.TimeSpan> **ppTime);
		[propput] HRESULT PeakRiseTime([in] Windows.Foundation.IReference<Windows.Foundation.TimeSpan> *pTime);
		[propget] HRESULT PeakFallTime([out, retval] Windows.Foundation.IReference<Windows.Foundation.TimeSpan> **ppTime);
		[propput] HRESULT PeakFallTime([in] Windows.Foundation.IReference<Windows.Foundation.TimeSpan> *pTime);
		[propget] HRESULT SpectrumRiseTime([out, retval] Windows.Foundation.IReference<Windows.Foundation.TimeSpan> **ppTime);
		[propput] HRESULT SpectrumRiseTime([in] Windows.Foundation.IReference<Windows.Foundation.TimeSpan> *pTime);
		[propget] HRESULT SpectrumFallTime([out, retval] Windows.Foundation.IReference<Windows.Foundation.TimeSpan> **ppTime);
		[propput] HRESULT SpectrumFallTime([in] Windows.Foundation.IReference<Windows.Foundation.TimeSpan> *pTime);
	};

	[version(1.0)]
	[activatable(1.0)]
	runtimeclass SourceConverter
	{
		[default] interface IVisualizationSource;
		interface ISourceConverter;
	}


	[version(1.0)]
	runtimeclass MediaAnalyzer
	{
		[default]interface Windows.Media.IMediaExtension;
		interface IVisualizationSource;
		interface ISpectralAnalyzerSettings;
	}
}

